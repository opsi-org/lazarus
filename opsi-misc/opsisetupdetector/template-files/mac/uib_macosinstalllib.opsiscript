; This code is part of the opsi.org project
;
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by the uib gmbh, D55118 Mainz, Germany
; and published under the Terms of the GNU Affero General Public License.
; Text of the AGPL: http://www.gnu.org/licenses/agpl-3.0-standalone.html


encoding=utf8

;@author          detlef oertel
;@email           d.oertel@uib.de
;@date            28.12.2020
;@copyright       AGPLv3
;@version         1.0
;@filedesc        Collection of functions to install packages on macos


deffunc install_macos_app($myapp$ : string) : string
	;@author          detlef oertel
	;@date            28.12.2020
	;@Description     try to install the app given by $myapp$
	;@Returns         Returns string "true" if all is ok
	;@OnError         Returns string "false"; error counter increased ; Error messages in the log
	;@SpecialCase     
	;@References      install_macos_pkg
	;@References      install_macos_dmg
	;@References      install_macos_zip
	;@References      install_macos_generic
	;@Links
	;@ParamDesc_$myapp$     string with path to app to install 
	;@ParamAdvice_$myapp$
	;@Example     [Actions]
	;@Example     importlib "uib_macosinstalllib"
	;@Example     
	;@Example     DefVar $installfile$
	;@Example     DefVar $installresult$
	;@Example     
	;@Example     comment "we have a *.app (directory) and install with install_macos_app"
	;@Example     set $installfile$ = "%scriptpath%/files/my_macos_app.app"
	;@Example     set $installresult$ = install_macos_app($installfile$)
	;@Example     if stringtobool($installresult$)
	;@Example     	comment "installation succseeded"
	;@Example     else
	;@Example     	LogError "installation failed"
	;@Example     endif

	
	DefVar $sourceDir$
	DefVar $myAppDir$
	
	set $result$ = "false"
	if directoryexists($myapp$)
		set $sourceDir$ = ExtractFilePath($myapp$)
		set $myAppDir$ = ExtractFileName ($myapp$)
		markerrornumber
		Files_copy_app
		shellCall('chmod ugo+x "/Applications/'+$myAppDir$+'/Contents/Macos/*')
		if errorsOccurredSinceMark = 0
			; installation success
			set $result$ = "true"
		else
			logerror "Copy files from "+$myapp$+" to Application Dir failed. - installation failed."
		endif
	else
		LogError $myapp$+" is not a directory as expected. - installation failed."
	endif
	
	[Files_copy_app]
	copy -s "$sourceDir$/$myAppDir$/*" "/Applications/$myAppDir$/"
	
endfunc


deffunc install_macos_pkg($mypkg$ : string) : string
	;@author          detlef oertel
	;@date            28.12.2020
	;@Description     try to install the pkg file given by $mypkg$
	;@Returns         Returns string "true" if all is ok
	;@OnError         Returns string "false"; error counter increased ; Error messages in the log
	;@SpecialCase     
	;@References      install_macos_app
	;@References      install_macos_dmg
	;@References      install_macos_zip
	;@References      install_macos_generic
	;@Links
	;@ParamDesc_$mypkg$     string with path to pkg file to install 
	;@ParamAdvice_$mypkg$
	;@Example     [Actions]
	;@Example     importlib "uib_macosinstalllib"
	;@Example     
	;@Example     DefVar $installfile$
	;@Example     DefVar $installresult$
	;@Example     
	;@Example     comment "we have a *.pkg and install with install_macos_pkg"
	;@Example     set $installfile$ = "%scriptpath%/files/my_macos_app.pkg"
	;@Example     set $installresult$ = install_macos_pkg($installfile$)
	;@Example     if stringtobool($installresult$)
	;@Example     	comment "installation succseeded"
	;@Example     else
	;@Example     	LogError "installation failed"
	;@Example     endif

	
	defvar $exitcode$
	defvar $goon$
	
	set $result$ = "false"
	if fileexists($mypkg$)
		set $exitcode$ = shellcall("installer -allowUntrusted -verbose -dumplog -pkg '"+$mypkg$+"' -target /")
		if not($exitcode$ = "0")
			logerror "installer did not end with exitcode 0. - installation failed."
			;includelog "/tmp/installer.log" "50"
		else
			; installation success
			set $result$ = "true"
		endif
	else
		LogError $mypkg$+" is not a file as expected. - Abort installation."
	endif
endfunc


deffunc install_macos_dmg($mydmg$ : string) : string
	;@author          detlef oertel
	;@date            28.12.2020
	;@Description     try to install the dmg file given by $mydmg$
	;@Returns         Returns string "true" if all is ok
	;@OnError         Returns string "false"; error counter increased ; Error messages in the log
	;@SpecialCase     
	;@References      install_macos_app
	;@References      install_macos_pkg
	;@References      install_macos_zip
	;@References      install_macos_generic
	;@Links
	;@ParamDesc_$mydmg$     string with path to dmg file to install 
	;@ParamAdvice_$mydmg$
	;@Example     [Actions]
	;@Example     importlib "uib_macosinstalllib"
	;@Example     
	;@Example     DefVar $installfile$
	;@Example     DefVar $installresult$
	;@Example     
	;@Example     comment "we have a *.dmg and install with install_macos_dmg"
	;@Example     set $installfile$ = "%scriptpath%/files/my_macos_app.dmg"
	;@Example     set $installresult$ = install_macos_dmg($installfile$)
	;@Example     if stringtobool($installresult$)
	;@Example     	comment "installation succseeded"
	;@Example     else
	;@Example     	LogError "installation failed"
	;@Example     endif

	
	defStringlist $outlist$
	defStringlist $filelist$
	defvar $outline$
	defVar $regexp$
	defVar $mountdevice$
	defVar $mountpoint$
	defvar $exitcode$
	defvar $goon$
	defvar $workdir$
	set $result$ = "false"
	set $goon$ = "true"
	set $workdir$ = "/tmp/opsimountpoint"
	
	; todo test file, test extension
	if fileexists($mydmg$)
		if not(ExtractFileExtension ($mydmg$) = ".dmg")
			LogError $mydmg$ + " has not the extension .dmg as expected. - Abort installation."
			set $goon$ = "false"
		endif
	else
		LogError $mydmg$ + " is not a file as expected. - Abort installation."
		set $goon$ = "false"
	endif
	if $goon$ = "true"
		; convert to supress license agreement
		; https://superuser.com/questions/221136/bypass-a-licence-agreement-when-mounting-a-dmg-on-the-command-line
		;set $filelist$ = shellcall('hdiutil convert -quiet "'+$mydmg$+'" -format UDTO -o /tmp/converted.cdr')
		set $filelist$ = shellcall("hdiutil convert -quiet '"+$mydmg$+"' -format UDTO -o /tmp/converted.cdr")
		set $filelist$ = shellcall('hdiutil attach -quiet -nobrowse -noverify -noautoopen -mountpoint '+$workdir$+' /tmp/converted.cdr')
		set $filelist$ = shellcall("ls -1 "+$workdir$)
		; do we have a .app
		set $regexp$ =  "(?i)\.app$"
		set $outlist$ = getSubListByContainingRegex($regexp$,$filelist$)
		if count($outlist$) > "0"
			; use the first one
			set $outline$ = trim(takeString("0" , $outlist$))
			; is it a directory (it should)
			if directoryexists($workdir$+"/"+$outline$)
				; we have found the .app directory inside the dmg and now we copy it
				set $result$ = install_macos_app($workdir$+"/"+$outline$)
			else
				LogError $outline$+" inside the dmg is not a directory as expected. - installation failed."
				set $goon$ = "false"
			endif
		else
			set $regexp$ =  "(?i)\.pkg$"
			set $outlist$ = getSubListByContainingRegex($regexp$,$filelist$)
			if count($outlist$) > "0"
				; install pkg
				; https://apple.stackexchange.com/questions/72226/installing-pkg-with-terminal
				; use the first one
				set $outline$ = trim(takeString("0" , $outlist$))
				; is it a file (it should)
				if fileexists($workdir$+"/"+$outline$)
					set $result$ = install_macos_pkg($workdir$+"/"+$outline$)
				else
					LogError $outline$+" is not a file as expected. - Abort installation."
					set $goon$ = "false"
				endif
			else
				LogError $outline$+" does wether contain a .app dir nor a pkg file. - Abort installation."
			endif
		endif
		; unmount
		set $exitcode$ = shellcall("hdiutil detach "+$workdir$)
		if not($exitcode$ = "0")
			logerror "hdiutil did not end with exitcode 0"
		endif
		; shellcall("hdiutil detach "+$mountdevice$)
		Files_cleanup
	endif
	
	[Files_cleanup]
	del -f /tmp/installer.log
	del -f /tmp/converted.cdr
	del -f $workdir$
	
endfunc

deffunc install_macos_zip($myzip$ : string) : string
	;@author          detlef oertel
	;@date            28.12.2020
	;@Description     try to install the zip file given by $myzip$
	;@Description     unzips the file and try to find a installable 
	;@Description     part (*.app, *.pkg, *.dmg) and try to install this
	;@Returns         Returns string "true" if all is ok
	;@OnError         Returns string "false"; error counter increased ; Error messages in the log
	;@SpecialCase     
	;@References      install_macos_app
	;@References      install_macos_dmg
	;@References      install_macos_pkg
	;@References      install_macos_generic
	;@Links
	;@ParamDesc_$myzip$     string with path to zip file to install 
	;@ParamAdvice_$myzip$
	;@Example     [Actions]
	;@Example     importlib "uib_macosinstalllib"
	;@Example     
	;@Example     DefVar $installfile$
	;@Example     DefVar $installresult$
	;@Example     
	;@Example     comment "we have a *.zip and install with install_macos_zip"
	;@Example     set $installfile$ = "%scriptpath%/files/my_macos_app.zip"
	;@Example     set $installresult$ = install_macos_zip($installfile$)
	;@Example     if stringtobool($installresult$)
	;@Example     	comment "installation succseeded"
	;@Example     else
	;@Example     	LogError "installation failed"
	;@Example     endif

	
	defStringlist $outlist$
	defvar $outline$
	defVar $regexp$
	defvar $exitcode$
	defvar $goon$
	defvar $workdir$
	set $result$ = "false"
	set $goon$ = "true"
	set $workdir$ = "/tmp/opsimountpoint"
	
	; todo test file, test extension
	if fileexists($myzip$)
		if not(ExtractFileExtension ($myzip$) = ".zip")
			LogError $myzip$ + " has not the extension .zip as expected. - Abort installation."
			set $goon$ = "false"
		endif
	else
		LogError $myzip$ + " is not a file as expected. - Abort installation."
		set $goon$ = "false"
	endif
	if $goon$ = "true"
		Files_unzip
		if errorsOccurredSinceMark > 0
			logerror "Unzip files from "+$myzip$+" to temporary Dir failed. - installation failed."
			set $goon$ = "false"
		endif
		if $goon$ = "true"
			set $outlist$ = shellcall("ls -1 "+$workdir$)
			; do we have a .app
			set $regexp$ =  "(?i)\.app$"
			set $outlist$ = getSubListByContainingRegex($regexp$,$outlist$)
			if count($outlist$) > "0"
				; use the first one
				set $outline$ = trim(takeString("0" , $outlist$))
				; is it a directory (it should)
				if directoryexists($workdir$+"/"+$outline$)
					; we have found the .app directory inside the dmg and now we copy it
					set $result$ = install_macos_app($workdir$+"/"+$outline$)
				else
					LogError $outline$+" inside the zip is not a directory as expected. - installation failed."
					set $goon$ = "false"
				endif
			else
				set $regexp$ =  "(?i)\.pkg$"
				set $outlist$ = getSubListByContainingRegex($regexp$,$outlist$)
				if count($outlist$) > "0"
					; install pkg
					; https://apple.stackexchange.com/questions/72226/installing-pkg-with-terminal
					; use the first one
					set $outline$ = trim(takeString("0" , $outlist$))
					; is it a file (it should)
					if fileexists($workdir$+"/"+$outline$)
						set $result$ = install_macos_pkg($workdir$+"/"+$outline$)
					else
						LogError $outline$+" is not a file as expected. - Abort installation."
						set $goon$ = "false"
					endif
				else
					LogError $outline$+" does wether contain a .app dir nor a pkg file. - Abort installation."
				endif
			endif
		endif
		Files_cleanup
	endif
	
	[Files_cleanup]
	del -f /tmp/installer.log
	del -sf $workdir$
	
	[Files_unzip]
	checktargetpath = $workdir$
	unzipfile "$myzip$" $workdir$
	
endfunc

deffunc install_macos_generic($myfile$ : string) : string
	;@author          detlef oertel
	;@date            28.12.2020
	;@Description     try to install the file given by $myfile$
	;@Description     Checks if the file is a well known installable 
	;@Description     (*.app, *.pkg, *.dmg, *.zip) and try to install this
	;@Returns         Returns string "true" if all is ok
	;@OnError         Returns string "false"; error counter increased ; Error messages in the log
	;@SpecialCase     
	;@References      install_macos_app
	;@References      install_macos_dmg
	;@References      install_macos_zip
	;@References      install_macos_pkg
	;@Links
	;@Example         see: install_macos_generic
	;@ParamDesc_$myfile$     string with path to pkg file to install 
	;@ParamAdvice_$myfile$
	;@Example     [Actions]
	;@Example     importlib "uib_macosinstalllib"
	;@Example     
	;@Example     DefVar $installfile$
	;@Example     DefVar $installresult$
	;@Example     
	;@Example     comment "we have a *.* and install with install_macos_generic"
	;@Example     set $installfile$ = "%scriptpath%/files/opsi-script.app"
	;@Example     set $installresult$ = install_macos_generic($installfile$)
	;@Example     if stringtobool($installresult$)
	;@Example     	comment "installation succseeded"
	;@Example     else
	;@Example     	LogError "installation failed"
	;@Example     endif

	
	defStringlist $outlist$
	defvar $myext$
	defvar $goon$
	defvar $workdir$
	set $result$ = "false"
	set $goon$ = "true"
	set $workdir$ = "/tmp/opsimountpoint"
	
	
	if not(fileexists($myfile$))
		LogError $myzip$ + " is not a file as expected. - Abort installation."
		set $result$ = "false"
		set $goon$ = "false"
	endif
	if $goon$ = "true"
		set $myext$ = ExtractFileExtension ($myfile$)
		Switch $myext$
			Case ".zip"
				set $result$ = install_macos_zip($myfile$)
			EndCase
			
			Case ".dmg"
				set $result$ = install_macos_dmg($myfile$)
			EndCase
			Case ".pkg"
				set $result$ = install_macos_pkg($myfile$)
			EndCase
			Case ".app"
				set $result$ = install_macos_app($myfile$)
			EndCase
			DefaultCase
				logError "Installation aborted: wrong OS version: only Windows, macos, Linux"
				isFatalError "wrong OS"
			EndCase
		EndSwitch
	endif
endfunc
