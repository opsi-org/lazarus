variables:
  PROJECT_NAME:
    value: "opsiscript"
    description: "Name of the lazarus project (name of .lpi, without the lpi extension)"

stages:
  - init
  - build
  - test_windows
  # - test_linux
  # - test_macos
  - binaryindex

default:
  before_script:
    - echo "Execute this command before any 'script:' commands."

workflow:
  rules:
    - if: $PROJECT_NAME == "opsiscript"
      variables:
        PROJECT_REPOSITORY_PATH: "opsi-script"
    - if: $PROJECT_NAME == "opsi_laz_gui_test"
      variables:
        PROJECT_REPOSITORY_PATH: "helper/opsi-laz-gui-test"
    - if: $PROJECT_NAME == "opsi_client_systray"
      variables:
        PROJECT_REPOSITORY_PATH: "helper/opsi-client-systray"

#**********************************************#
#  Get the binary version from the             # 
#  Lazarus Project file (.lpi).                #
#  The file format is xml.                     #
#**********************************************#
get version:
  stage: init
  tags:
    - laz-win10
  rules:
    - if: ($PROJECT_NAME == "")
      when: never
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual
  script:
    - $LAZ_PROJECT_FILE=Join-Path ${PROJECT_REPOSITORY_PATH}\  "${PROJECT_NAME}.lpi"
    - New-Item version.env
    - $doc = [XML] (Get-Content -Path $LAZ_PROJECT_FILE)
    - $MajorVersionNr = $doc.SelectSingleNode("//MajorVersionNr").Value
    - if ($MajorVersionNr -eq $null) {$MajorVersionNr = 0}
    - $MinorVersionNr = $doc.SelectSingleNode("//MinorVersionNr").Value
    - if ($MinorVersionNr -eq $null) {$MinorVersionNr = 0}
    - $RevisionNr = $doc.SelectSingleNode("//RevisionNr").Value
    - if ($RevisionNr -eq $null) {$RevisionNr = 0}
    - $BuildNr = $doc.SelectSingleNode("//BuildNr").Value
    - if ($BuildNr -eq $null) {$BuildNr = 0}
    - $BINARY_VERSION = $MajorVersionNr + "." + $MinorVersionNr + "." + $RevisionNr + "." + $BuildNr
    - echo $BINARY_VERSION
    - Add-Content version.env "BINARY_VERSION=${BINARY_VERSION}"
  artifacts:
    reports:
      dotenv: version.env


#***************************************#
#  opsi-script pipline                  #
#***************************************#
.opsi-script_defaults:
  rules:
    - if: ($PROJECT_NAME != "opsiscript")
      when: never
    - if: $CI_COMMIT_TAG =~ /^opsi-script/
      when: always
    - when: manual

compile opsi-script windows:
  stage: build
  tags:
    - laz-win10
  dependencies:
    - get version
  rules: 
    - !reference [.opsi-script_defaults, rules]
  script:
    - $LAZ_PROJECT_FILE=Join-Path ${PROJECT_REPOSITORY_PATH}\  "${PROJECT_NAME}.lpi"
    - echo "$LAZ_PROJECT_FILE"
    - echo "Compiling $PROJECT_NAME for Win32"
    - C:\lazarus\lazbuild.exe $LAZ_PROJECT_FILE --build-all --build-mode=Release_Win32
    - echo "Compiling $PROJECT_NAME for Win64"
    - C:\lazarus\lazbuild.exe $LAZ_PROJECT_FILE --build-all --build-mode=Release_Win64
  artifacts:
    name: "opsi-script $BINARY_VERSION windows"
    paths:
      - $PROJECT_REPOSITORY_PATH\compiler_out\binarys\i386-win32\
      - $PROJECT_REPOSITORY_PATH\compiler_out\binarys\x86_64-win64\
   

compile opsi-script linux:
  stage: build
  tags:
    - laz-linux
  dependencies:
    - get version
  rules: 
    - !reference [.opsi-script_defaults, rules]
  script:
    - LAZ_PROJECT_FILE=${PROJECT_REPOSITORY_PATH}/${PROJECT_NAME}.lpi
    - echo "$LAZ_PROJECT_FILE"
    - echo "Compiling $PROJECT_NAME for Linux with no GUI"
    - /usr/share/lazarus/3.4.0/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_Lin_64_nogui
    - echo "Compiling $PROJECT_NAME for Linux with GUI"
    - /usr/share/lazarus/3.4.0/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_Lin_64_gui
    # - $BINARY_OUT_PATH = $PROJECT_NAME -eq "opsiscript")
  artifacts:
    name: "opsi-script $BINARY_VERSION linux"
    paths:
      - $PROJECT_REPOSITORY_PATH/compiler_out/binarys/x86_64-linux/


compile opsi-script macos:
  stage: build
  tags:
    - laz-macos
  dependencies:
    - get version
  rules: 
    - !reference [.opsi-script_defaults, rules]
  variables:
    ENTITLEMENTS: "--entitlements $PROJECT_REPOSITORY_PATH/opsi-script.entitlements" #maybe needed later
  script:
    #---BUILD BINARIES---
    - LAZ_PROJECT_FILE=${PROJECT_REPOSITORY_PATH}/${PROJECT_NAME}.lpi
    - echo "$LAZ_PROJECT_FILE"
    - echo "Compiling $PROJECT_NAME for MacOS with no GUI"
    - /Applications/Lazarus/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_mac_nogui --ws=cocoa
    - echo "Compiling $PROJECT_NAME for MacOS with GUI"
    - /Applications/Lazarus/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_mac_gui --ws=cocoa
    # - $BINARY_OUT_PATH = $PROJECT_NAME -eq "opsiscript")
  artifacts:
    name: "opsi-script $BINARY_VERSION macos"
    paths:
      - $PROJECT_REPOSITORY_PATH/compiler_out/binarys/x86_64-darwin/


opsi-script-test windows:
  stage: test_windows
  tags:
    - laz-windows
  variables:
    PROJECT_REPOSITORY_PATH: "opsi-script"
  rules:
    - if: ($PROJECT_NAME == "opsiscript") && ($PLATFORM == "all" || $PLATFORM == "Windows")
      when: never # change to always if job script/rules are their
  script:
    - echo "opsi-script-test on windows"
    - cp $PROJECT_REPOSITORY_PATH\compiler_out\binarys\i386-win32\opsi-script.exe %SystemDrive%\%ProgramFiles(x86)%\opsi.org\opsi-client-agent\opsi-script\opsi-script.exe
    #- C:\"Program Files (x86)"\opsi.org\opsi-client-agent\opsi-script\opsi-script.exe $PROJECT_REPOSITORY_PATH\ci_cd_opsi-script-test.opsiscript /silent
    - C:\"Program Files (x86)"\opsi.org\opsi-client-agent\opsi-script\opsi-script.exe $PROJECT_REPOSITORY_PATH\ci_cd_opsi-script-test.opsiscript /batch /opsiservice $OPSISERVICEURL /clientid $LAZ_WINDOWS /username $LAZ_WINDOWS /password $PASSWORD_LAZ_WINDOWS
    #- ssh $USERNAME@bonifax.uib.gmbh #work this out
    #- opsi-admin -d fire_Event OnDemand opsi-script-test setup # work this out
    #- git clone opsi-script-test


opsi-script to binaryindex:
  stage: binaryindex
  tags:
    - laz-linux
  dependencies:
    - get version
    - compile opsi-script windows
    - compile opsi-script linux
    - compile opsi-script macos
  rules: 
    - !reference [.opsi-script_defaults, rules]
  script:
    - echo "deploy to binaryindex"
    - rm -rf upload
    - cd opsi-script
    - opsi-dev-cli -l info binary pull
    - cp compiler_out/binarys/i386-win32/opsi-script.exe upload/win32/opsi-script
    - cp compiler_out/binarys/x86_64-win64/opsi-script.exe upload/win64/opsi-script
    - cp compiler_out/binarys/x86_64-linux/opsi-script upload/lin64/opsi-script
    - cp compiler_out/binarys/x86_64-linux/opsi-script-gui upload/lin64/opsi-script
    - cp compiler_out/binarys/x86_64-darwin/opsi-script upload/mac64/opsi-script
    - cp compiler_out/binarys/x86_64-darwin/opsi-script-gui upload/mac64/opsi-script
    - opsi-dev-cli -l info signserver sign upload/win32/opsi-script/opsi-script.exe
    - opsi-dev-cli -l info signserver sign upload/win64/opsi-script/opsi-script.exe
    #- opsi-dev-cli -l info virustotal check upload/win32/opsi-script/opsi-script.exe upload/win64/opsi-script/opsi-script.exe --allow-detections=10
    - ls -lah upload/*/opsi-script
    - echo "${BINARY_VERSION}"
    - opsi-dev-cli -l info binary push --product opsi-script-bin --os windows --architecture x86 --version "${BINARY_VERSION}" upload/win32/opsi-script
    - opsi-dev-cli -l info binary push --product opsi-script-bin --os windows --architecture x64 --version "${BINARY_VERSION}" upload/win64/opsi-script  
    - opsi-dev-cli -l info binary push --product opsi-script-bin --os linux --architecture x64 --version "${BINARY_VERSION}" upload/lin64/opsi-script
    - opsi-dev-cli -l info binary push --product opsi-script-bin --os darwin --architecture x64 --version "${BINARY_VERSION}" upload/mac64/opsi-script  

#*********************************
# opsi-laz-gui-test
#*********************************
.opsi-laz-gui-test_defaults:
  rules:
    - if: ($PROJECT_NAME != "opsi_laz_gui_test")
      when: never
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual


compile opsi-laz-gui-test linux:
  stage: build
  tags:
    - laz-linux
  dependencies:
    - get version
  rules:
    - !reference [.opsi-laz-gui-test_defaults, rules]
  script:
    - LAZ_PROJECT_FILE=${PROJECT_REPOSITORY_PATH}/opsi_laz_gui_test.lpi
    - echo "$LAZ_PROJECT_FILE"
    - echo "Compiling opsi-laz-gui-testE for Linux"
    - /usr/bin/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release
    # - $BINARY_OUT_PATH = $PROJECT_NAME -eq "opsiscript")
  artifacts:
    name: "opsi-laz-gui-test $BINARY_VERSION linux"
    paths:
      - $PROJECT_REPOSITORY_PATH/binarys/linux/opsi-laz-gui-test


compile opsi-laz-gui-test macos:
  stage: build
  tags:
    - laz-macos
  dependencies:
    - get version
  rules:
    - !reference [.opsi-laz-gui-test_defaults, rules]
  script:
    #---BUILD BINARIES---
    - LAZ_PROJECT_FILE=${PROJECT_REPOSITORY_PATH}/${PROJECT_NAME}.lpi
    - echo "$LAZ_PROJECT_FILE"
    - echo "Compiling $PROJECT_NAME for MacOS"
    - /Library/Lazarus/lazbuild $LAZ_PROJECT_FILE --build-all --build-mode=Release_mac --ws=cocoa
    # - $BINARY_OUT_PATH = $PROJECT_NAME -eq "opsiscript")
  artifacts:
    name: "opsi-laz-gui-test $BINARY_VERSION macos"
    paths:
      - $PROJECT_REPOSITORY_PATH/binarys/mac/opsi-laz-gui-test

opsi-laz-gui-test to binaryindex:
  stage: binaryindex
  tags:
    - laz-linux
  dependencies:
    - get version
  rules:
    - !reference [.opsi-laz-gui-test_defaults, rules]
  script:
    - echo "deploy to binaryindex"
    - cd helper/opsi-laz-gui-test
    - opsi-dev-cli binary push binarys/linux/opsi-laz-gui-test --product=opsi-laz-gui-test --system=linux --version="${BINARY_VERSION}"
    - opsi-dev-cli binary push binarys/mac/opsi-laz-gui-test --product=opsi-laz-gui-test --system=darwin --version="${BINARY_VERSION}"



#***************************************#
#  opsi-client-systray pipline          #
#***************************************#
.opsi-client-systray_defaults:
  rules:
    - if: ($PROJECT_NAME != "opsi_client_systray")
      when: never
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual

compile opsi-client-systray windows:
  stage: build
  tags:
    - laz-win10
  dependencies:
    - get version
  variables:
    BINARY_NAME: "opsi-client-systray"
  rules:
    - !reference [.opsi-client-systray_defaults, rules]
  script:
    - $LAZ_PROJECT_FILE=Join-Path ${PROJECT_REPOSITORY_PATH}\  "${PROJECT_NAME}.lpi"
    - echo "$LAZ_PROJECT_FILE"
    - echo "Compiling $PROJECT_NAME for Win32"
    - C:\lazarus\lazbuild.exe $LAZ_PROJECT_FILE --build-mode=Release
    - cd $PROJECT_REPOSITORY_PATH/compiler_out/binarys
    - ls -lah
    - opsi-dev-cli -l info signserver sign i386-win32\$BINARY_NAME.exe
    - opsi-dev-cli -l info signserver sign x86_64-win64\$BINARY_NAME.exe
    #- opsi-dev-cli -l info virustotal check i386-win32\$BINARY_NAME.exe x86_64-win64\$BINARY_NAME.exe --allow-detections=10
    - opsi-dev-cli binary push i386-win32\$BINARY_NAME.exe --product opsi-client-systray --system windows --architecture x86 --version "${BINARY_VERSION}"
    - opsi-dev-cli binary push x86_64-win64\$BINARY_NAME.exe --product opsi-client-systray --system windows --architecture x64 --version "${BINARY_VERSION}"
  artifacts:
    name: "$BINARY_NAME $BINARY_VERSION windows"
    paths:
      - $PROJECT_REPOSITORY_PATH\$BINARY_NAME


compile opsi-client-systray linux:
  stage: build
  tags:
    - laz-linux
  dependencies:
    - get version
  variables:
    BINARY_NAME: "opsi-client-systray"
  rules:
    - !reference [.opsi-client-systray_defaults, rules]
  script:
    - LAZ_PROJECT_FILE=${PROJECT_REPOSITORY_PATH}/${PROJECT_NAME}.lpi
    - echo "$LAZ_PROJECT_FILE"
    - echo "Compiling $PROJECT_NAME for Linux x64"
    - /usr/bin/lazbuild $LAZ_PROJECT_FILE --build-mode=Release
    - cd $PROJECT_REPOSITORY_PATH/compiler_out/binarys
    - ls -lah
    - opsi-dev-cli binary push x86_64-linux/$BINARY_NAME --product opsi-client-systray --system linux --version "${BINARY_VERSION}"
  artifacts:
    name: "$BINARY_NAME $BINARY_VERSION linux"
    paths:
      - $PROJECT_REPOSITORY_PATH/$BINARY_NAME

compile opsi-client-systray macos:
  stage: build
  tags:
    - laz-macos
  dependencies:
    - get version
  variables:
    BINARY_NAME: "opsi-client-systray"
  rules:
    - !reference [.opsi-client-systray_defaults, rules]
  script:
    - LAZ_PROJECT_FILE=${PROJECT_REPOSITORY_PATH}/${PROJECT_NAME}.lpi
    - echo "$LAZ_PROJECT_FILE"
    - echo "Compiling $PROJECT_NAME for MacOS x64"
    - /Applications/Lazarus/lazbuild $LAZ_PROJECT_FILE --build-mode=Release_mac --ws=cocoa
    - cd $PROJECT_REPOSITORY_PATH/compiler_out/binarys
    - ls -lah
    - opsi-dev-cli binary push x86_64-darwin/$BINARY_NAME --product opsi-client-systray --system darwin --version "${BINARY_VERSION}"
    # - $BINARY_OUT_PATH = $PROJECT_NAME -eq "opsiscript")
  artifacts:
    name: "$BINARY_NAME $BINARY_VERSION macos"
    paths:
      - $PROJECT_REPOSITORY_PATH/$BINARY_NAME
